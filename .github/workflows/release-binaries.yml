
name: 'Release'

on:
  workflow_dispatch:
    bump:
      type: choice
      description: Which semver number to bump
      options:
        - major
        - minor
        - patch
      required: true

jobs:
  next_version:
    name: Next version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get current version
        id: prev_ver
        run: |
          set -x
          PREV_VER="$(cargo metadata --no-deps --all-features --format-version=1 | jq -r .packages[].version)"
          echo ::set-output name=previous_version::"$PREV_VER"

  binary_matrix:
    name: Make matrix
    needs: next_version
    runs-on: ubuntu-latest
    outputs:
      bin_targets: ${{ steps.generate_matrix.outputs.bin_targets }}
      do_artifact: ${{ steps.conf.outputs.do_artifact }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Check conditions
        id: conf
        run: |
          echo ::set-output name=do_artifact::1;
          if [ "$(jq .release.artifact -r ci-conf.json)" = false ] || [ "$(jq .release.artifact -r ci-conf.json)" = null ]; then echo 'skipping because no release artifact config'; echo ::set-output name=artifact::0; fi
          if [ "$(jq .release.artifact.targets -r ci-conf.json)" = false ]; then echo 'skipping because no targets'; echo ::set-output name=artifact::0; fi
          if [ "$(jq .release.artifact.bins -r ci-conf.json)" = false ]; then echo 'skipping because no binaries'; echo ::set-output name=artifact::0; fi
      - name: Generate matrix
        id: generate_matrix
        if: steps.conf.outputs.do_artifact == 1
        run: |
          mat="$(jq .release.artifact -r ci-conf.json | jq '.targets[] + (.bins[] | {"bin": .})' | jq -sc '{"include":.}')"
          echo $mat
          echo ::set-output name=bin_targets::"$mat"

  binary:
    name: Release binaries
    needs: binary_matrix
    runs-on: ubuntu-latest
    if: needs.binary_matrix.outputs.do_artifact == 1
    strategy:
      matrix: ${{ fromJson(needs.binary_matrix.outputs.bin_targets) }}
    steps:
      - name: Log matrix
        run: |
          echo bin=${{ matrix.bin }}
          echo target=${{ matrix.target }}
          echo asset_postfix=${{ matrix.asset_postfix }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project
        run: |
          cat ./ci/release.Dockerfile
          set -x
          docker build --build-arg BIN="${{ matrix.bin }}" --build-arg TARGET="${{ matrix.target }}" -t release-image -f ./ci/release.Dockerfile .
          id=$(docker create release-image)
          docker cp "$id:/${{ matrix.bin }}" "${{ matrix.bin }}"
      - name: Upload binary to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/${{ matrix.bin }}
          asset_name: ${{ matrix.bin }}-${{ matrix.asset_postfix }}
